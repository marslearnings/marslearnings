{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MARS Learnings","text":""},{"location":"#a-learning-destination","title":"A Learning Destination","text":"<p>MARS Learnings is dedicated to empowering learners in AI, Machine Learning, Data Science, and Computer Vision.  We are a sister concern of DataScienceAnywhere, we we have published many course in Udemy and YouTube channel offering content in AI and data science.</p>"},{"location":"#why-choose-us","title":"Why Choose Us?","text":"<ul> <li>Industry-Relevant Courses \u2013 Our courses are designed to meet industry standards and equip learners with real-world skills.</li> <li>Expert-Led Training \u2013 Learn from industry professionals with years of experience in AI, ML, and Data Science.</li> <li>Hands-on Projects \u2013 Gain practical experience with real-world projects.</li> <li>Lifetime Access \u2013 Once enrolled, enjoy lifetime access to course materials.</li> </ul>"},{"location":"#our-core-competencies","title":"Our Core Competencies","text":"<p>MARS Learnings specializes in:</p> <ul> <li>Machine Learning \u2013 Learn how to build predictive models and automate decision-making.</li> <li>AI Engineering \u2013 Master AI model development and deployment.</li> <li>Computer Vision \u2013 Explore image processing and deep learning for visual tasks.</li> <li>Data Science \u2013 Learn data analysis, visualization, and statistical modeling.</li> </ul>"},{"location":"#explore-our-courses-on-udemy","title":"Explore Our Courses on Udemy","text":"<p>We offer a variety of courses on Udemy, providing in-depth training and hands-on learning experiences. Check out some of our top courses below:</p> Intelligently Extract Text &amp; Data from Document with OCR NER <p>Develop Document Scanner App project from scratch.</p> Enroll Now MongoDB: Fundamentals to Advanced with PyMongo <p>A hands-on guide to mastering MongoDB and Vector Databases</p> Enroll Now YOLO: Custom Object Detection and Web App in Python <p>Learn to train custom object detection model using Python.</p> Enroll Now <p>Click on explore more to know more about our courses.</p> <p>Join MARS Learnings today and accelerate your journey in AI, Machine Learning, and Data Science!</p>"},{"location":"admonitions/","title":"Admonitions","text":"<p>Example of an admonition/callout with a title:</p> <p>Title of the callout</p> <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.</p> Collapsible callout <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.</p>"},{"location":"code-examples/","title":"Code examples","text":"<p>An exmple of a codeblock for Python:</p> add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5,3)\nprint('The sum is', result)\n</code></pre>"},{"location":"content-tabs/","title":"Content tabs","text":""},{"location":"content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"content-tabs/#generic-content","title":"Generic Content","text":"Plain TextUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Thrid item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Thrid item</li> </ol>"},{"location":"diagrams-examples/","title":"Diagram Examples","text":""},{"location":"diagrams-examples/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n    A[Start] --&gt; B{Failure?};\n    B --&gt; |Yes| C[Investigate...];\n    C --&gt; D[Debug];\n    D --&gt; B;\n    B ----&gt; |No| E[Sucess!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/04/13/introduction-to-regular-expressions/","title":"Introduction to Regular Expressions","text":"<ul> <li>Download PDF: Introduction to Regular Expression</li> <li>Video Explanation:  YOUTUBE</li> </ul> <p>Regular expressions (regex) are patterns used to match character combinations in strings. These patterns can be simple characters or a combination of simple and special characters.</p> <p>Examples:</p> <ul> <li><code>/abc/</code> - A simple pattern matching the literal string \"abc\"</li> <li><code>/ab*c/</code> - A pattern using special characters to match variations</li> </ul>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#the-regular-expression-syntax","title":"The Regular Expression Syntax","text":"<p>Regular expressions follow a specific syntax:</p> <ul> <li>In standard notation: <code>/pattern/</code></li> <li>In Python: <code>r\"pattern\"</code></li> </ul> <p>When a pattern is applied to text, it returns the range where the pattern exists in the string.</p>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#literals-or-simple-characters","title":"Literals or Simple Characters","text":"<p>Simple literals match the exact characters in the pattern.</p> <p>Example:</p> <ul> <li><code>/cat/</code> matches the string \"cat\" within text</li> </ul>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#meta-characters","title":"Meta Characters","text":"<p>Meta characters give regular expressions their power, allowing for more sophisticated matching.</p>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#special-characters","title":"Special Characters","text":"Character Description Example Match | Either or <code>cat\\|hello</code> Matches \"cat\" or \"hello\" . Any character (except newline) <code>he..lo</code> Matches characters between \"e\" and \"l\" { } Exactly specified number of occurrences <code>he.{2}o</code> Matches \"hello\" where there are exactly 2 characters between \"e\" and \"o\" * Zero or more occurrences <code>he.*o</code> Matches \"hello\", \"hero\", \"helico\", etc. + One or more occurrences <code>he.+o</code> Same as above but requires at least one character ? Zero or one occurrence <code>he.?o</code> Matches \"heo\" or \"hero\" ( ) Capture and group patterns [ ] A set of characters <code>[a-z]</code> Matches any lowercase letter ^ Starts with <code>^hello</code> Matches strings starting with \"hello\" $ Ends with <code>world$</code> Matches strings ending with \"world\" \\ Signals a special sequence <code>\\d</code> Matches any digit","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#character-classes","title":"Character Classes","text":"<p>Character classes allow you to define a set of characters where any single character from that set will match.</p> Expression Description <code>[cs]</code> Matches either \"c\" or \"s\" (e.g., <code>/licen[cs]e/</code> matches \"licence\" or \"license\") <code>[0-9]</code> Matches any digit from 0 to 9 <code>[a-z]</code> Matches any lowercase letter <code>[A-Z]</code> Matches any uppercase letter <code>[0-9a-zA-Z]</code> Matches any alphanumeric character <code>[^0-9]</code> Matches any character that is NOT a digit <code>[^a-z]</code> Matches any character that is NOT a lowercase letter","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#quantifiers","title":"Quantifiers","text":"<p>Quantifiers define how many times a character, metacharacter, or character set can be repeated.</p> Symbol Name Meaning ? Question Mark 0 or 1 repetition * Asterisk Zero or more times + Plus sign One or more times {n,m} Curly braces Between n and m times <p>Examples:</p> <ul> <li><code>/hello*/</code> matches \"hell\", \"hello\", \"helloo\", \"hellooo\", etc.</li> <li><code>/hello+/</code> matches \"hello\", \"helloo\", \"hellooo\", etc. (but not \"hell\")</li> <li><code>/hello?/</code> matches only \"hell\" or \"hello\"</li> <li><code>/hello{2,5}/</code> matches \"helloo\", \"hellooo\", \"helloooo\", \"hellooooo\"</li> </ul>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#special-sequence-characters","title":"Special Sequence Characters","text":"","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#pre-defined-characters","title":"Pre-defined Characters","text":"Character Description Equivalent \\w Word characters (letters, digits, underscore) <code>[a-zA-Z0-9_]</code> \\W NOT word characters <code>[^a-zA-Z0-9_]</code> \\d Digits <code>[0-9]</code> \\D NOT digits <code>[^0-9]</code> \\s Whitespace characters <code>[ \\t\\n\\r\\f\\v]</code> \\S NOT whitespace characters <code>[^ \\t\\n\\r\\f\\v]</code>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#boundary-characters","title":"Boundary Characters","text":"<p>Boundary matchers identify specific positions within the input text.</p> Matcher Description ^ Matches at the beginning of a line $ Matches at the end of a line \\b Matches a word boundary (beginning or end of word) \\B Matches anything that is NOT a word boundary \\A Matches the beginning of the input \\Z Matches the end of the input","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#practice-exercises","title":"Practice Exercises","text":"","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#excerise-1-basic-pattern-matching","title":"Excerise 1: Basic Pattern Matching","text":"<p>Consider this example string: <pre><code>The quick brown fox jumps over the lazy dog. This is outside (this is inside)\n</code></pre></p> Question Answer Match the string \"fox\" and provide its range 16-19 How many times does \"is\" appear in the string? 4 Match the pattern \"(this is inside)\" and provide its range 61-77","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#excerise-2-using-or-operator-pipe","title":"Excerise 2: Using OR Operator (pipe)","text":"<p>For the string: <pre><code>The sun rises in the east and sets in the west. Birds sing in the morning or evening.\n</code></pre></p> Question Pattern Match either \"sun\" or \"moon\" <code>sun|moon</code> Match either \"east\" or \"west\" <code>east|west</code> Match either \"morning\" or \"evening\" <code>morning|evening</code> Match either \"rises\", \"sets\", or \"sing\" <code>rises|sets|sing</code> Match either \"The\" or \"Birds\" <code>The|Birds</code>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#excerise-3-character-set-dot","title":"Excerise 3: Character Set, dot(.)","text":"<p>For this data: <pre><code>Contact Information:\nJohn Doe - john.doe@example.com - (555) 123-4567\nMary Smith - mary_smith@email.net - 555.987.6543\nTom Johnson - tom-johnson@company.org - (555)246-8910\nSarah Brown - sarah@brown.co.uk - +1-555-369-7412\nMike Wilson - mike.wilson@subdomain.example.edu - 555 741 0258\n</code></pre></p> Question Pattern Match any single vowel <code>[aeiou]</code> Match either \"John\" or \"Tom\" <code>John|Tom</code> Match any character that is NOT a digit <code>[^0-9]</code> Match either \"com\" or \"net\" in email domains <code>com|net</code> Match any single digit in phone numbers <code>[0-9]</code> Match any character between 'T' and 'm' in \"Tom\" <code>T.m</code> Match any single uppercase letter <code>[A-Z]</code> Match any character that is not a letter or number <code>[^0-9a-zA-Z]</code>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#excerise-4-quantiers","title":"Excerise 4: Quantiers","text":"<p>Consider the below example string and Use the \"The Curious Case of the Missing Code\" text to answer the following questions. </p> <p><pre><code>The Curious Case of the Missing Code\n\nJohn_Smith123 was panicking. It was 9:30 AM on April 15, 2025, and he had just realized that the crucial code files for Project-X2021 were missing from his laptop. Yesterday at 17:45, everything had been fine when he left the office at 42 Maple Street, Suite #301.\n\nHe quickly sent an email to his boss (anna.director@techcorp.com) and his team members (dev.team@techcorp.com):\n\nSubject: URGENT - Missing Project Files\nBody: Team, I can't locate the following files:\n- main_v3.2.py\n- config_prod.json\n- api_keys.txt (IP: 192.168.1.100)\n\nI've checked my backups from 2023-12-01 through 2025-03-15 but found nothing. Has anyone committed changes to the repository at http://git.techcorp.com/projects/x2021? My phone number is (555) 123-4567 if you need to reach me urgently. The project deadline is in 72 hours!\n\nLisa responded first at 9:42 AM: \"I saved a copy at C:\\Projects\\Backup\\X2021-backup.zip. The password is XB21-9$f5. You can also check with Mark who was working late yesterday.\"\n\nJohn sighed with relief. Crisis averted! Now he needed to update the project documentation with proper file paths like /usr/local/bin/project-x/ for Linux users and C:\\Program Files\\Project-X\\ for Windows users.\n\nHe made a note to call Lisa later at +1-555-987-6543 to thank her properly.\n</code></pre> Create regular expressions that match exactly what's requested (nothing more, nothing less).</p> <p>Basic Character Sets</p> <ol> <li>Create a pattern that matches all instances of dates in the format YYYY-MM-DD.</li> <li>Write a regex that finds all alphanumeric identifiers that contain both letters and numbers (like \"John_Smith123\" or \"Project-X2021\").</li> <li>Match all times in the HH:MM AM/PM format.</li> </ol> <p>Predefined Character Classes</p> <ol> <li>Create a pattern using \\d and \\w to extract all phone numbers in the format (555) 123-4567 or +1-555-987-6543.</li> <li>Write a regex using \\s and \\S to find all file paths (both Windows and Linux style).</li> <li>Develop a pattern using \\w, \\d, and \\s to match all file names with version numbers (like \"main_v3.2.py\").</li> </ol> <p>Metacharacters and Alternation</p> <ol> <li>Use the pipe operator (|) to match either email addresses or web URLs.</li> <li>Create a pattern with the dot (.) metacharacter to find all text within parentheses.</li> <li>Write a regex that matches IP addresses like 192.168.1.100.</li> </ol> <p>Combined Challenge</p> <ol> <li>Create a comprehensive pattern that extracts all forms of contact information (emails and phone numbers) from the text.</li> </ol> <p>Solution</p> <ol> <li> <p>Pattern to match dates in YYYY-MM-DD format:    <pre><code>\\d{4}-\\d{2}-\\d{2}\n</code></pre>    Matches: \"2023-12-01\", \"2025-03-15\"</p> </li> <li> <p>Pattern for alphanumeric identifiers with both letters and numbers:    <pre><code>[A-Za-z][A-Za-z0-9_]*\\d+[A-Za-z0-9_]*\n</code></pre>    Matches: \"John_Smith123\", \"Project-X2021\", \"XB21-9$f5\" (part of it)</p> </li> <li> <p>Pattern for times in HH:MM AM/PM format:    <pre><code>\\d{1,2}:\\d{2}\\sAM|\\d{1,2}:\\d{2}\\sPM\n</code></pre>    Matches: \"9:30 AM\", \"9:42 AM\"</p> </li> <li> <p>Pattern for phone numbers using \\d and \\w:    <pre><code>\\(\\d{3}\\)\\s\\d{3}-\\d{4}|\\+\\d-\\d{3}-\\d{3}-\\d{4}\n</code></pre>    Matches: \"(555) 123-4567\", \"+1-555-987-6543\"</p> </li> <li> <p>Pattern for file paths using \\s and \\S:    <pre><code>[A-Z]:\\\\[^\\s]+|/\\S+/\n</code></pre>    Matches: \"C:\\Projects\\Backup\\X2021-backup.zip\", \"C:\\Program Files\\Project-X\\\", \"/usr/local/bin/project-x/\"</p> </li> <li> <p>Pattern for filenames with version numbers using \\w, \\d, and \\s:    <pre><code>\\w+_v\\d+\\.\\d+\\.\\w+\n</code></pre>    Matches: \"main_v3.2.py\"</p> </li> <li> <p>Pattern for email addresses or web URLs using pipe operator:**    <pre><code>[a-zA-Z0-9_.]+@[a-zA-Z0-9_.]+\\.[a-z]+|http://[^\\s]+\n</code></pre>    Matches: \"anna.director@techcorp.com\", \"dev.team@techcorp.com\", \"http://git.techcorp.com/projects/x2021\"</p> </li> <li> <p>Pattern with dot metacharacter to find text in parentheses:    <pre><code>\\(.*?\\)\n</code></pre>    Matches: \"(555) 123-4567\", \"(IP: 192.168.1.100)\"</p> </li> <li> <p>Pattern for IP addresses:    <pre><code>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\n</code></pre>    Matches: \"192.168.1.100\"</p> </li> <li> <p>Comprehensive pattern for contact information:     <pre><code>[a-zA-Z0-9_.]+@[a-zA-Z0-9_.]+\\.[a-z]+|\\(\\d{3}\\)\\s\\d{3}-\\d{4}|\\+\\d-\\d{3}-\\d{3}-\\d{4}\n</code></pre>     Matches all email addresses and phone numbers in the text</p> </li> </ol>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#excerise-6-boundary-matchers","title":"Excerise 6 - Boundary Matchers","text":"<p>These questions are based on the following example string:</p> <pre><code>Hello world! This is line one.\nWorld, hello! This is line two.\nHelloWorld is a single word.\nThe word \"hello\" appears in quotes.\nThis line ends with hello\nhello starts this line and world ends it with world\ncom.example.domain is a domain name\nuser@example.com is an email address.\n2023-05-15 is a date format.\nThe final line ends the entire text.\n</code></pre> <p>Questions on ^ (Caret) Boundary</p> <ol> <li>Write a regex pattern that matches any line beginning with the word \"Hello\".</li> <li>Write a regex pattern that matches any line beginning with either \"Hello\" or \"hello\".</li> <li>How many lines in the example string start with a capital letter?</li> </ol> <p>Questions on $ (Dollar) Boundary</p> <ol> <li>Write a regex pattern that matches any line ending with the word \"hello\".</li> <li>How many lines in the example string end with a period (dot)?</li> <li>Write a regex pattern that matches any line ending with the exact word \"world\".</li> </ol> <p>Questions on \\b (Word Boundary)</p> <ol> <li>Write a regex pattern that matches the standalone word \"hello\" (case-insensitive) in the example text.</li> <li>How many times does the standalone word \"world\" (lowercase only) appear in the example text?</li> <li>Write a regex pattern that matches the word \"is\" only when it appears as a complete word.</li> </ol> <p>Questions on \\B (Non-word Boundary)</p> <ol> <li>Write a regex pattern that matches \"World\" only when it's part of another word without word boundaries.</li> <li>In the example text, what word contains \"World\" without word boundaries on either side?</li> <li>Write a regex that matches \"example\" when it's part of a larger word or token.</li> </ol> <p>Questions on \\A (Start of String)</p> <ol> <li>What single word would a regex pattern \\AHello match in our example text?</li> <li>Write a regex that matches the first 5 characters of the entire example text.</li> <li>How does the pattern \\AThe perform on our example text?</li> </ol> <p>Questions on\u00a0 \\Z (End of String)</p> <ol> <li>Write a regex pattern that matches the last sentence of the entire example text.</li> <li>What's the last word in the entire example text that would be matched by \\w+.\\Z?</li> <li>Write a regex that matches the last 10 characters of the entire example text.</li> </ol> <p>Solution</p> <ol> <li>Write a regex pattern that matches any line beginning with the word \"Hello\".</li> </ol> <p><pre><code>^Hello.+\n</code></pre> 2. Write a regex pattern that matches any line beginning with either \"Hello\" or \"hello\".</p> <p><pre><code>^[Hh]ello.+\n</code></pre> 3. How many lines in the example string start with a capital letter ?</p> <p><pre><code>^[A-Z].+\n</code></pre> 4. Write a regex pattern that matches any line ending with the word \"hello\".</p> <p><pre><code>.+hello$\n</code></pre> 5. How many lines in the example string end with a period (dot)?</p> <p><pre><code>.+\\.$\n</code></pre> 6. Write a regex pattern that matches any line ending with the exact word \"world\".</p> <p><pre><code>.+\\bworld\\b$\n</code></pre> 7. Write a regex pattern that matches the standalone word \"hello\" (case-insensitive) in the example text.</p> <p><pre><code>\\b[Hh]ello\\b\n</code></pre> 8. How many times does the standalone word \"world\" (lowercase only) appear in the example text?</p> <p><pre><code>\\bworld\\b\n</code></pre> 9. Write a regex pattern that matches the word \"is\" only when it appears as a complete word.</p> <p><pre><code>\\bis\\b\n</code></pre> 10. Write a regex pattern that matches \"World\" only when it's part of another word without word boundaries.</p> <p><pre><code>\\BWorld\\B\\\n</code></pre> 11. In the example text, what word contains \"World\" without word boundaries on either side?</p> <pre><code>\\w+.+\\BWorld\\B\\w+.+\n</code></pre> <ol> <li>Write a regex that matches \"example\" when it's part of a larger word or token.</li> </ol> <p><pre><code>\\Bexample\\B\n</code></pre> 13.  What single word would a regex pattern \\AHello match in our example text?</p> <p>It matches word Hello in entire string</p> <ol> <li>Write a regex that matches the first 5 characters of the entire example text.</li> </ol> <p><pre><code>\\A.{5}\n</code></pre> 15.  How does the pattern \\AThe perform on our example text?</p> <p>No pattern is identified</p> <p>16.Write a regex pattern that matches the last sentence of the entire example text.</p> <pre><code>.+\\Z\n</code></pre> <p>17.What's the last word in the entire example text that would be matched by \\w+.\\Z?</p> <pre><code>text.\n</code></pre> <p>18.Write a regex that matches the last 10 characters of the entire example text.</p> <pre><code>.{10}\\Z\n</code></pre>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/04/13/introduction-to-regular-expressions/#warning","title":"Warning","text":"<p>The dot (.) is a very powerful metacharacter that can create problems if not used properly, as it matches almost any character.</p> <p>Source: Data Science Anywhere</p> <ul> <li>YouTube: https://www.youtube.com/@datascienceanywhere/</li> <li>Udemy: https://www.udemy.com/user/freeai-space/</li> <li>GitHub: https://github.com/marslearnings</li> </ul>","tags":["regular expression","regex","quanitier","meta characters","special sequence characters"]},{"location":"blog/2025/03/16/python-print/","title":"Python print()","text":"<p>Python's <code>print()</code> function is one of the first commands most beginners learn, yet it offers surprising depth and versatility. This guide explores the various capabilities of the <code>print()</code> function that can enhance your code's output formatting and readability.</p>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#basic-print-usage","title":"Basic Print Usage","text":"<p>The simplest use of the <code>print()</code> function is to display text or values:</p> <pre><code>print(\"Hello, world\")\n# Output: Hello, world\n\nprint(2)\n# Output: 2\n\nprint(2+3)\n# Output: 5\n</code></pre> <p>You can combine text and expressions using commas:</p> <pre><code>print(\"2+3 =\", 2+3)\n# Output: 2+3 = 5\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#customizing-output-with-parameters","title":"Customizing Output with Parameters","text":"","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#the-sep-parameter","title":"The <code>sep</code> Parameter","text":"<p>By default, <code>print()</code> separates multiple arguments with spaces. You can customize this separator using the <code>sep</code> parameter:</p> <pre><code># Default separator (space)\nprint(\"a\", \"b\", \"c\", \"d\")\n# Output: a b c d\n\n# Empty separator\nprint(\"a\", \"b\", \"c\", \"d\", sep='')\n# Output: abcd\n\n# Hyphen separator\nprint(\"a\", \"b\", \"c\", \"d\", sep='-')\n# Output: a-b-c-d\n\n# Custom word separator\nprint(\"a\", \"b\", \"c\", \"d\", sep='data')\n# Output: adatabdatacdatad\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#the-end-parameter","title":"The <code>end</code> Parameter","text":"<p>By default, <code>print()</code> adds a newline character at the end of output. You can change this behavior with the <code>end</code> parameter:</p> <pre><code>print(\"a\", \"b\", \"c\", \"d\", end=' ')\nprint(\"Hello world\", end=' ')\nprint('Hi, how are you')\n# Output: a b c d Hello world Hi, how are you\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#combining-sep-and-end","title":"Combining <code>sep</code> and <code>end</code>","text":"<p>These parameters can be used together for powerful formatting:</p> <pre><code>print(\"a\", \"b\", \"c\", \"d\", sep=\"\\n\", end='\\t')\nprint(\"Hello world\", end='\\t')\nprint('Hi, how are you')\n# Output: \n# a\n# b\n# c\n# d Hello world Hi, how are you\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#escape-sequence-characters","title":"Escape Sequence Characters","text":"<p>Python's print function supports various escape sequences for special formatting:</p> Escape Sequence Description <code>\\n</code> Newline <code>\\t</code> Horizontal tab <code>\\\\</code> Backslash <code>\\'</code> Single quote <code>\\\"</code> Double quote <code>\\r</code> Carriage return <code>\\b</code> Backspace","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#newline-example","title":"Newline Example","text":"<pre><code>print(\"Hello\\nworld\")\n# Output:\n# Hello\n# world\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#tab-example","title":"Tab Example","text":"<pre><code>print(\"Hello\\t\\t\\tworld\")\n# Output: Hello         world\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#escaping-special-characters","title":"Escaping Special Characters","text":"<p>To print literal escape sequences, use the backslash as an escape character:</p> <pre><code>print('\\\\n')  # Escapes the sequence\n# Output: \\n\n\nprint(\"c:\\\\notebook\\\\tables\")\n# Output: c:\\notebook\\tables\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#quote-characters","title":"Quote Characters","text":"<p>You can use different quotation marks strategically:</p> <pre><code>print(\"It is a beautiful day. But it's raining today\")\n# Output: It is a beautiful day. But it's raining today\n\nprint('He said, \"Hi\"')\n# Output: He said, \"Hi\"\n</code></pre> <p>Or escape quotes when needed:</p> <pre><code>print('It is a beautiful day. But it\\'s raining today')\n# Output: It is a beautiful day. But it's raining today\n\nprint(\"He said, \\\"Hi\\\"\")\n# Output: He said, \"Hi\"\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#carriage-return","title":"Carriage Return","text":"<p>The <code>\\r</code> escape sequence returns to the beginning of the line and overwrites characters:</p> <pre><code>print('123456\\rhello world')\n# Output: hello world\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#backspace","title":"Backspace","text":"<p>The <code>\\b</code> escape sequence removes the character before it:</p> <pre><code>print('hello\\bworld')\n# Output: hellworld\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#saving-output-to-files","title":"Saving Output to Files","text":"<p>The <code>print()</code> function can send output directly to files:</p> <pre><code>f = open(\"print_file.txt\", mode='a')  # 'w' for write, 'a' for append\nprint(2+3, file=f)\nf.close()  # Always close files after use\n</code></pre>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#best-practices","title":"Best Practices","text":"<ol> <li>Use appropriate quote types (<code>'</code> or <code>\"</code>) to minimize escaping</li> <li>Close file handles after printing to files</li> <li>Consider readability when combining multiple print parameters</li> <li>Use f-strings for complex string formatting in modern Python</li> </ol>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-print/#summary","title":"Summary","text":"<p>The <code>print()</code> function is much more than a simple output tool. With its various parameters and support for escape sequences, you can create well-formatted, readable output for debugging, user interaction, or data presentation.</p> <p>By mastering these features, you'll be able to communicate more effectively through your Python programs, whether you're creating simple scripts or complex applications.</p>","tags":["python print","escape sequence characters","print save to file"]},{"location":"blog/2025/03/16/python-variables-and-type-casting/","title":"Python Variables and Type Casting","text":"<p>Variables are fundamental building blocks in Python programming. They act as containers for storing data values that can be manipulated and referenced throughout your code. This guide covers the basics of variable declaration, assignment, and type conversion in Python.</p>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#variable-declaration-and-basic-types","title":"Variable Declaration and Basic Types","text":"<p>Python supports several basic variable types:</p> <ol> <li><code>int</code> \u2013 Integer type (whole numbers)</li> <li><code>float</code> \u2013 Floating point numbers (decimal numbers)</li> <li><code>bool</code> \u2013 Boolean values (True or False)</li> <li><code>str</code> \u2013 String type (textual data)</li> </ol> <p>Unlike some other programming languages, Python uses dynamic typing, which means you don't need to declare the variable type explicitly.</p> <pre><code>var1 = 2        # integer\nvar2 = 5.0      # float\nv3 = True       # boolean\n</code></pre> <p>You can display variables using the <code>print()</code> function:</p> <pre><code>print(\"variable - 1= \", var1)\nprint(\"variable - 2= \", var2)\nprint(\"variable - 3= \", v3)\n</code></pre> <p>Output: <pre><code>variable - 1=  2\nvariable - 2=  5.0\nvariable - 3=  True\n</code></pre></p>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#checking-variable-types","title":"Checking Variable Types","text":"<p>The <code>type()</code> function allows you to check the data type of any variable:</p> <pre><code>type(var1)  # returns &lt;class 'int'&gt;\ntype(var2)  # returns &lt;class 'float'&gt;\ntype(v3)    # returns &lt;class 'bool'&gt;\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#multiple-assignment","title":"Multiple Assignment","text":"<p>Python allows you to assign values to multiple variables in a single line:</p> <pre><code>x, y = 1, 2.5\n\nprint('x =', x)\nprint('y =', y)\n</code></pre> <p>Output: <pre><code>x = 1\ny = 2.5\n</code></pre></p>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#type-casting","title":"Type Casting","text":"<p>Type casting is the process of converting one data type into another. Python provides several built-in functions for type conversion:</p>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#integer-conversions","title":"Integer Conversions","text":""},{"location":"blog/2025/03/16/python-variables-and-type-casting/#converting-integer-to-float","title":"Converting Integer to Float","text":"<pre><code>int_number = 5\nfloat_number = float(int_number)\nprint(float_number)               # Output: 5.0\nprint('data type =', type(float_number))  # Output: data type = &lt;class 'float'&gt;\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#converting-integer-to-string","title":"Converting Integer to String","text":"<pre><code>int_number = 5\nstr_number = str(int_number)\nprint(str_number)                 # Output: 5\nprint('data type =', type(str_number))  # Output: data type = &lt;class 'str'&gt;\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#float-conversions","title":"Float Conversions","text":""},{"location":"blog/2025/03/16/python-variables-and-type-casting/#converting-float-to-integer","title":"Converting Float to Integer","text":"<pre><code>val1 = 5.1\nval2 = 5.51\n# int() truncates the decimal part (does not round)\nint_val1 = int(val1)\nint_val2 = int(val2)\nprint('int_val1 =', int_val1)  # Output: int_val1 = 5\nprint('int_val2 =', int_val2)  # Output: int_val2 = 5\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#special-rounding-functions","title":"Special Rounding Functions","text":"<p>Python provides several functions for rounding floating-point numbers:</p>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#1-the-round-function","title":"1. The <code>round()</code> Function","text":"<pre><code>val1 = 5.1\nval2 = 5.51\nint_val1 = round(val1)\nint_val2 = round(val2)\nprint('int_val1 =', int_val1)  # Output: int_val1 = 5\nprint('int_val2 =', int_val2)  # Output: int_val2 = 6\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#2-the-ceil-function","title":"2. The <code>ceil()</code> Function","text":"<p>The <code>ceil()</code> function from the <code>math</code> module always rounds up to the next integer:</p> <pre><code>from math import ceil\n\nval1 = 5.1\nval2 = 5.51\nint_val1 = ceil(val1)\nint_val2 = ceil(val2)\nprint('int_val1 =', int_val1)  # Output: int_val1 = 6\nprint('int_val2 =', int_val2)  # Output: int_val2 = 6\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#3-the-floor-function","title":"3. The <code>floor()</code> Function","text":"<p>The <code>floor()</code> function from the <code>math</code> module always rounds down to the previous integer:</p> <pre><code>from math import floor\n\nval1 = 5.1\nval2 = 5.51\nint_val1 = floor(val1)\nint_val2 = floor(val2)\nprint('int_val1 =', int_val1)  # Output: int_val1 = 5\nprint('int_val2 =', int_val2)  # Output: int_val2 = 5\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#converting-float-to-string","title":"Converting Float to String","text":"<pre><code>float_number = 5.0\nstr_float_number = str(float_number)\nprint(str_float_number)  # Output: 5.0\nprint('data type =', type(str_float_number))  # Output: data type = &lt;class 'str'&gt;\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#boolean-conversions","title":"Boolean Conversions","text":"<p>Boolean values can be converted to other types:</p> <pre><code># Boolean to Integer\nprint(int(True))   # Output: 1\nprint(int(False))  # Output: 0\n\n# Boolean to String\nprint(str(True))   # Output: 'True'\nprint(str(False))  # Output: 'False'\n</code></pre> <p>It's worth noting that in Python, any non-zero number or non-empty string evaluates to <code>True</code> when converted to a boolean:</p> <pre><code>bool_val = bool(-1)\nprint(bool_val)  # Output: True\n\nprint(bool(0))   # Output: False\nprint(bool(1))   # Output: True\nprint(bool(\"\"))  # Output: False\nprint(bool(\"hello\"))  # Output: True\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#string-conversions","title":"String Conversions","text":"<p>Converting strings to numeric types is conditional on the string content:</p>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#converting-string-to-integer","title":"Converting String to Integer","text":"<pre><code># Works only if the string contains a valid integer\nvar8 = '5'\nvar8_int = int(var8)\nprint(var8_int)  # Output: 5\nprint(type(var8_int))  # Output: &lt;class 'int'&gt;\n\n# This will raise a ValueError\n# var7 = \"datascience\"\n# int(var7)  # Error: invalid literal for int() with base 10: 'datascience'\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#converting-string-to-float","title":"Converting String to Float","text":"<pre><code># Works only if the string contains a valid number\nvar8 = '5.1'\nvar8_float = float(var8)\nprint(var8_float)  # Output: 5.1\nprint(type(var8_float))  # Output: &lt;class 'float'&gt;\n\n# This will raise a ValueError\n# var7 = \"datascience\"\n# float(var7)  # Error: could not convert string to float: 'datascience'\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#multi-step-conversions","title":"Multi-step Conversions","text":"<p>Sometimes you might need to perform multiple conversions:</p> <pre><code>var8 = '5.1'\nvar8_float = float(var8)  # First convert string to float\nvar8_int = int(var8_float)  # Then convert float to int\nprint(var8_int)  # Output: 5\nprint(type(var8_int))  # Output: &lt;class 'int'&gt;\n</code></pre>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#best-practices","title":"Best Practices","text":"<ol> <li>Choose descriptive variable names that indicate what the variable represents</li> <li>Use type casting carefully, particularly when converting between numeric types and strings</li> <li>Handle potential errors when converting strings to numbers</li> <li>Be aware of the difference between truncation and rounding when converting floats to integers</li> </ol>"},{"location":"blog/2025/03/16/python-variables-and-type-casting/#summary","title":"Summary","text":"<p>Python's dynamic typing system and built-in type conversion functions provide flexibility in handling different data types. Understanding how to properly declare variables and convert between types is essential for writing effective Python code.</p> <p>By mastering these concepts, you'll be better prepared to handle data transformation and manipulation tasks in your Python programs.</p>"},{"location":"blog/archive/2025/","title":"April 2025","text":""},{"location":"blog/category/python/","title":"Python","text":""}]}